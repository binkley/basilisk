import com.github.spotbugs.SpotBugsTask

import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE"
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.1.1.RELEASE"
        classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.0"
        classpath "com.google.guava:guava:27.1-jre" // For SpotBugs
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.21.0"
    id "build-dashboard"
    id "com.dorongold.task-tree" version "1.3.1"
    id "jacoco"
}

apply plugin: BasePlugin
apply plugin: "io.spring.dependency-management" // TODO: Use plugins.id

def ignoreNonReleaseVersions = { ComponentSelection selection ->
    boolean rejected = ["alpha", "beta", "rc", "cr", "m"].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
    }
    if (rejected) {
        selection.reject("Release candidate")
    }
}

//noinspection GroovyAssignabilityCheck
allprojects {
    group = "hm.binkley"
    version = "0"

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencyUpdates {
        //noinspection GroovyAssignabilityCheck
        resolutionStrategy {
            componentSelection { rules ->
                rules.all(ignoreNonReleaseVersions)
            }
        }
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    task checkstyle {
        group = "Verification"
        description = "Checks Java coding style."

        dependsOn tasks.withType(Checkstyle)
    }

    task spotbugs {
        group = "Verification"
        description = "Checks for Java potential coding errors."

        dependsOn tasks.withType(SpotBugsTask)
    }

    defaultTasks "build"
}

//noinspection GroovyAssignabilityCheck
subprojects {
    ext {
        postgresVersion = "10.6.0"
        spotbugsVersion = "3.1.12"
        springBootVersion = "2.1.3.RELEASE"
        springBootAdminVersion = "2.1.3"
        springCloudContractVersion = "2.1.1.RELEASE"
        swaggerVersion = "2.9.2"
    }

    ext["assertj.version"] = "3.12.2"
    ext["junit-jupiter.version"] = "5.4.1"
    ext["lombok.version"] = "1.18.6"
    ext["mockito.version"] = "2.25.1"

    apply plugin: JavaPlugin
    apply plugin: "net.ltgt.apt"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.unbroken-dome.test-sets"
    apply plugin: "jacoco"
    apply plugin: "com.github.spotbugs"
    apply plugin: "pmd"

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        //noinspection GroovyAssignabilityCheck
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}"
            mavenBom "io.zonky.test.postgres:embedded-postgres-binaries-bom:${postgresVersion}"
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        }
    }

    dependencies {
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        annotationProcessor "org.projectlombok:lombok"

        compileOnly "org.springframework.boot:spring-boot-configuration-processor"
        compileOnly "org.projectlombok:lombok"
        compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"

        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-data-jdbc"
        implementation "org.springframework.boot:spring-boot-starter-data-rest"
        implementation "org.springframework.boot:spring-boot-starter-hateoas"
        implementation "org.springframework.boot:spring-boot-starter-security"
        implementation "org.springframework.boot:spring-boot-starter-validation"
        implementation "org.zalando:problem-spring-web:0.23.0"
        implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
        implementation "de.codecentric:spring-boot-admin-starter-client"
        implementation "de.codecentric:spring-boot-admin-starter-server"

        runtime "org.springframework.data:spring-data-rest-hal-browser"
        runtime "org.postgresql:postgresql"
        runtime "org.flywaydb:flyway-core"
        runtime "io.springfox:springfox-swagger-ui:${swaggerVersion}"

        testAnnotationProcessor "org.projectlombok:lombok"

        testCompileOnly "org.projectlombok:lombok"
        testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.springframework.boot:spring-boot-starter-webflux"
        testImplementation "org.junit.jupiter:junit-jupiter"
        testImplementation "org.mockito:mockito-core"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.assertj:assertj-core"
        testImplementation "org.awaitility:awaitility:3.1.6"
        testImplementation "io.zonky.test:embedded-database-spring-test:1.4.1"
        testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier"
        testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
    }

    normalization {
        runtimeClasspath {
            ignore "META-INF/build-info.properties"
        }
    }

    spotbugs {
        // TODO: See https://github.com/spotbugs/spotbugs-gradle-plugin/issues/5
        excludeFilterConfig = resources.text.fromFile("${project.rootDir}/config/spotbugs/excludeFilter.xml")
        toolVersion = "${spotbugsVersion}"
    }

    pmd {
        toolVersion = "6.11.0"

        consoleOutput = true
        ruleSets = []
        // TODO: default location?
        ruleSetFiles = files("${project.rootDir}/config/pmd/ruleset.xml")
    }

    clean {
        delete "out"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs = [
                "-encoding", "UTF8",
                "-parameters",
                "-Werror",
                "-Xdiags:verbose",
                "-Xlint:all,-processing,-serial"
        ]
    }

    tasks.withType(Test) {
        systemProperty "java.util.logging.config.file", "${project.rootDir}/config/logging.properties"

        useJUnitPlatform()

        testLogging {
            showStandardStreams = true
            exceptionFormat = FULL
        }
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    tasks.withType(JacocoReportBase) {
        executionData(fileTree(buildDir).include("/jacoco/*.exec"))
    }

    jacocoTestReport {
        dependsOn tasks.withType(Test)
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 1.00
                }
            }
        }

        dependsOn jacocoTestReport
    }

    check {
        dependsOn jacocoTestCoverageVerification
    }
}

task jacocoMerge(type: JacocoMerge) {
    subprojects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
}

task jacocoMergedTestReport(type: JacocoReport) {
    dependsOn jacocoMerge

    executionData fileTree(buildDir).include("/jacoco/*.exec")
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))

    //noinspection GroovyAssignabilityCheck
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

check {
    dependsOn jacocoMergedTestReport
    finalizedBy buildDashboard
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "5.2.1"
}
